name: Release-Tag

on:
  push:
    tags:
      - release/*
      
env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Extract version from tag
      shell: bash
      run: |
        [[ "${GITHUB_REF}" == */v* ]] || exit 1
        VERSION=${GITHUB_REF##*/v}
        [[ "$VERSION" =~ ^(0|[1-9]\d*)(\.(0|[1-9]\d*)(\.(0|[1-9]\d*))?)?(-([^\+]*))?$ ]] || exit 2
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: |
        msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Version=${{env.VERSION}} ${{env.SOLUTION_FILE_PATH}}

#  /p:DeployOnBuild=true /p:PublishProfile=PublishProfileName
        
    - name: Archive release version
      uses: actions/upload-artifact@v3
      with:
        name: MultiTeams-v${{env.VERSION}}
        if-no-files-found: error
        path: |
            MultiTeams/bin/Release/net6.0-windows/*
            !MultiTeams/bin/Release/net6.0-windows/*.pdb
